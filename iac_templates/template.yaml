
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Personal Website Backend - API Alignment

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        LOG_LEVEL: "info"
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
        KMS_KEY_ID: !Ref KmsKeyArn # Global KMS Key for simplicity, can be overridden

Parameters:
  KmsKeyArn:
    Type: String
    Description: ARN of the KMS key for encryption/decryption.
    # Example: arn:aws:kms:us-east-1:123456789012:key/your-key-id

Resources:
  # --- Cognito User Pool ---
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-UserPool"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: profilePicture # URL to profile picture
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: bio
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes: [email]
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${AWS::StackName}-AppClient"
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - http://localhost:3000/callback # Replace with your actual callback URLs
      LogoutURLs:
        - http://localhost:3000/logout # Replace with your actual logout URLs
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: "ENABLED"

  # --- API Gateway Authorizer ---
  ApiGatewayAuthorizer:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod # Or Dev, etc.
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            # Identity: # Optional, to customize where the token is passed
            #   Header: Authorization

  # --- DynamoDB Tables ---
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Users"
      PrimaryKey:
        Name: id # Cognito Sub
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  NotesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Notes"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  BookmarksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Bookmarks"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  BookmarkFoldersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-BookmarkFolders"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  PasswordEntriesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-PasswordEntries"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  WalletCardsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-WalletCards"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  VoiceMemosTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-VoiceMemos"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  FilesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Files"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  FoldersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Folders"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  PhotosTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Photos"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  AlbumsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Albums"
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ResumeVersionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-ResumeVersions"
      PrimaryKey:
        Name: id # Version ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ShareLinksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-ShareLinks"
      PrimaryKey:
        Name: id # Share Link ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  CollaborationsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Collaborations"
      PrimaryKey:
        Name: id # Collaboration ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  CommentsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Comments"
      PrimaryKey:
        Name: id # Comment ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  NotificationsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Notifications"
      PrimaryKey:
        Name: id # Notification ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ActivitiesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Activities"
      PrimaryKey:
        Name: id # Activity ID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  LambdaDefaultExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaDefaultRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaDynamoDBAndKMSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt NotesTable.Arn
                  - !GetAtt BookmarksTable.Arn
                  - !GetAtt BookmarkFoldersTable.Arn
                  - !GetAtt PasswordEntriesTable.Arn
                  - !GetAtt WalletCardsTable.Arn
                  - !GetAtt VoiceMemosTable.Arn
                  - !GetAtt FilesTable.Arn
                  - !GetAtt FoldersTable.Arn
                  - !GetAtt PhotosTable.Arn
                  - !GetAtt AlbumsTable.Arn
                  - !GetAtt ResumeVersionsTable.Arn
                  - !GetAtt ShareLinksTable.Arn
                  - !GetAtt CollaborationsTable.Arn
                  - !GetAtt CommentsTable.Arn
                  - !GetAtt NotificationsTable.Arn
                  - !GetAtt ActivitiesTable.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                Resource: !Ref KmsKeyArn
              - Effect: Allow # Cognito access for auth utils and user management
                Action:
                  - cognito-idp:GetUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminUserGlobalSignOut
                  - cognito-idp:ConfirmForgotPassword
                  - cognito-idp:ForgotPassword
                  - cognito-idp:ResendConfirmationCode
                  - cognito-idp:SignUp
                  - cognito-idp:ConfirmSignUp
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}"

  # --- Auth Module Lambdas ---
  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: registerUser.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/register
            Method: post

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: loginUser.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/login
            Method: post

  VerifyTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: verifyToken.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        VerifyToken:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/verify-token
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  SignOutUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: signOut.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        SignOutUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/signout
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ConfirmSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmSignup.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        ConfirmSignup:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/confirm-signup
            Method: post

  ResendConfirmationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: resendConfirmationCode.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        ResendCode:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/resend-confirmation-code
            Method: post

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: forgotPassword.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/forgot-password
            Method: post

  ConfirmForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmForgotPassword.handler
      CodeUri: ../src/auth/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Events:
        ConfirmForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/auth/confirm-forgot-password
            Method: post

  # --- User Profile Module Lambdas ---
  GetUserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getUserProfile.handler
      CodeUri: ../src/users/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Events:
        GetUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/users/profile
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateUserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateUserProfile.handler
      CodeUri: ../src/users/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Events:
        UpdateUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/users/profile
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateUserSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateUserSettings.handler
      CodeUri: ../src/users/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Events:
        UpdateUserSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/users/settings
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Notes Module Lambdas ---
  CreateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createNote.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        CreateNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listNotes.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        ListNotes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getNote.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        GetNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateNote.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        UpdateNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteNote.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        DeleteNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  SearchNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: searchNotes.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        SearchNotes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes/search
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  ListNotesByTagFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listNotesByTag.handler
      CodeUri: ../src/notes/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
          NOTES_TAGS_GSI_NAME: NotesByTagGSI
      Events:
        ListNotesByTag:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notes/tags
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Voice Memos Module Lambdas ---
  InitiateVoiceMemoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateVoiceMemoUpload.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        InitiateVoiceMemoUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/initiate-upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListVoiceMemosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listVoiceMemos.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        ListVoiceMemos:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        GetVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateVoiceMemoMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateVoiceMemoMetadata.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        UpdateVoiceMemoMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}/metadata
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        DeleteVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  TranscribeVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: transcribeVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        TranscribeVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}/transcribe
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Bookmarks Module Lambdas ---
  CreateBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createBookmark.handler
      CodeUri: ../src/bookmarks/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        CreateBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListBookmarksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listBookmarks.handler
      CodeUri: ../src/bookmarks/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        ListBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getBookmark.handler
      CodeUri: ../src/bookmarks/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        GetBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateBookmark.handler
      CodeUri: ../src/bookmarks/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        UpdateBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteBookmarkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteBookmark.handler
      CodeUri: ../src/bookmarks/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        DeleteBookmark:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  SearchBookmarksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/bookmarks/searchBookmarks.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
      Events:
        SearchBookmarks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks/search # Query param q handled in lambda
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  ListBookmarksByTagFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/bookmarks/listBookmarksByTag.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
          BOOKMARKS_TAGS_GSI_NAME: BookmarksByTagGSI # GSI name
      Events:
        ListBookmarksByTag:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmarks/tags # Query param tags_like handled in lambda
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Bookmark Folders Module Lambdas ---
  CreateBookmarkFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createBookmarkFolder.handler
      CodeUri: ../src/bookmark_folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARK_FOLDERS_TABLE_NAME: !Ref BookmarkFoldersTable
      Events:
        CreateBookmarkFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmark-folders
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListBookmarkFoldersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listBookmarkFolders.handler
      CodeUri: ../src/bookmark_folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARK_FOLDERS_TABLE_NAME: !Ref BookmarkFoldersTable
      Events:
        ListBookmarkFolders:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmark-folders
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetBookmarkFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getBookmarkFolder.handler
      CodeUri: ../src/bookmark_folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARK_FOLDERS_TABLE_NAME: !Ref BookmarkFoldersTable
      Events:
        GetBookmarkFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmark-folders/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateBookmarkFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateBookmarkFolder.handler
      CodeUri: ../src/bookmark_folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARK_FOLDERS_TABLE_NAME: !Ref BookmarkFoldersTable
      Events:
        UpdateBookmarkFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmark-folders/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteBookmarkFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteBookmarkFolder.handler
      CodeUri: ../src/bookmark_folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          BOOKMARK_FOLDERS_TABLE_NAME: !Ref BookmarkFoldersTable
      Events:
        DeleteBookmarkFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/bookmark-folders/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Password Entries Module Lambdas ---
  ListPasswordEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listPasswordEntries.handler
      CodeUri: ../src/passwords/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PASSWORD_ENTRIES_TABLE_NAME: !Ref PasswordEntriesTable
      Events:
        ListPasswordEntries:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/passwords
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetPasswordEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPasswordEntry.handler
      CodeUri: ../src/passwords/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PASSWORD_ENTRIES_TABLE_NAME: !Ref PasswordEntriesTable
      Events:
        GetPasswordEntry:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/passwords/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdatePasswordEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePasswordEntry.handler
      CodeUri: ../src/passwords/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PASSWORD_ENTRIES_TABLE_NAME: !Ref PasswordEntriesTable
      Events:
        UpdatePasswordEntry:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/passwords/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeletePasswordEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deletePasswordEntry.handler
      CodeUri: ../src/passwords/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PASSWORD_ENTRIES_TABLE_NAME: !Ref PasswordEntriesTable
      Events:
        DeletePasswordEntry:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/passwords/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Wallet Cards Module Lambdas ---
  CreateWalletCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createWalletCard.handler
      CodeUri: ../src/wallet/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          WALLET_CARDS_TABLE_NAME: !Ref WalletCardsTable
      Events:
        CreateWalletCard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/wallet/cards
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListWalletCardsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listWalletCards.handler
      CodeUri: ../src/wallet/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          WALLET_CARDS_TABLE_NAME: !Ref WalletCardsTable
      Events:
        ListWalletCards:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/wallet/cards
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetWalletCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getWalletCard.handler
      CodeUri: ../src/wallet/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          WALLET_CARDS_TABLE_NAME: !Ref WalletCardsTable
      Events:
        GetWalletCard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/wallet/cards/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateWalletCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateWalletCard.handler
      CodeUri: ../src/wallet/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          WALLET_CARDS_TABLE_NAME: !Ref WalletCardsTable
      Events:
        UpdateWalletCard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/wallet/cards/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteWalletCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteWalletCard.handler
      CodeUri: ../src/wallet/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          WALLET_CARDS_TABLE_NAME: !Ref WalletCardsTable
      Events:
        DeleteWalletCard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/wallet/cards/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Voice Memos Module Lambdas ---
  InitiateVoiceMemoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateVoiceMemoUpload.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        InitiateVoiceMemoUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/initiate-upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListVoiceMemosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listVoiceMemos.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        ListVoiceMemos:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        GetVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateVoiceMemoMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateVoiceMemoMetadata.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        UpdateVoiceMemoMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}/metadata
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        DeleteVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  TranscribeVoiceMemoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: transcribeVoiceMemo.handler
      CodeUri: ../src/voicememos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          VOICE_MEMOS_TABLE_NAME: !Ref VoiceMemosTable
      Events:
        TranscribeVoiceMemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/voicememos/{id}/transcribe
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Files Module Lambdas ---
  InitiateFileUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateFileUpload.handler
      CodeUri: ../src/files/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        InitiateFileUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files/initiate-upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  CreateFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createFileMetadata.handler
      CodeUri: ../src/files/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        CreateFileMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listFiles.handler
      CodeUri: ../src/files/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        ListFiles:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/files/getFileMetadata.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        GetFileMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files/{id}/metadata # Or just /files/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateFileMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateFileMetadata.handler
      CodeUri: ../src/files/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        UpdateFileMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files/{id}/metadata
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteFile.handler
      CodeUri: ../src/files/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        DeleteFile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  DownloadFilePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/files/downloadFilePresignedUrl.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FILES_TABLE_NAME: !Ref FilesTable
          # S3_BUCKET_NAME: !Ref FilesBucket
      Events:
        DownloadFilePresignedUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/files/{id}/download # Or /files/{id}/url
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Folders Module Lambdas ---
  CreateFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createFolder.handler
      CodeUri: ../src/folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FOLDERS_TABLE_NAME: !Ref FoldersTable
      Events:
        CreateFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/folders
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListFoldersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listFolders.handler
      CodeUri: ../src/folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FOLDERS_TABLE_NAME: !Ref FoldersTable
      Events:
        ListFolders:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/folders
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getFolder.handler
      CodeUri: ../src/folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FOLDERS_TABLE_NAME: !Ref FoldersTable
      Events:
        GetFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/folders/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateFolder.handler
      CodeUri: ../src/folders/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FOLDERS_TABLE_NAME: !Ref FoldersTable
      Events:
        UpdateFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/folders/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteFolderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/folders/deleteFolder.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          FOLDERS_TABLE_NAME: !Ref FoldersTable
          FILES_TABLE_NAME: !Ref FilesTable # For deleting files within folder
      Events:
        DeleteFolder:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/folders/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Photos Module Lambdas ---
  InitiatePhotoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiatePhotoUpload.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        InitiatePhotoUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos/initiate-upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  CompletePhotoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: completePhotoUpload.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        CompletePhotoUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListPhotosFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listPhotos.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        ListPhotos:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetPhotoDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPhotoDetails.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        GetPhotoDetails:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdatePhotoDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePhotoDetails.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        UpdatePhotoDetails:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeletePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deletePhoto.handler
      CodeUri: ../src/photos/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        DeletePhoto:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/photos/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Albums Module Lambdas ---
  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
      Events:
        CreateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListAlbumsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listAlbums.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
      Events:
        ListAlbums:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
          PHOTOS_TABLE_NAME: !Ref PhotosTable # If album details include photos
      Events:
        GetAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
      Events:
        UpdateAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
          PHOTOS_TABLE_NAME: !Ref PhotosTable # If deleting photos in album
      Events:
        DeleteAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  AddPhotoToAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: addPhotoToAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        AddPhotoToAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums/{albumId}/photos
            Method: post # Or PUT
            Auth:
              Authorizer: CognitoAuthorizer

  RemovePhotoFromAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: removePhotoFromAlbum.handler
      CodeUri: ../src/albums/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          ALBUMS_TABLE_NAME: !Ref AlbumsTable
          PHOTOS_TABLE_NAME: !Ref PhotosTable
      Events:
        RemovePhotoFromAlbum:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/albums/{albumId}/photos/{photoId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Resume Module Lambdas ---
  InitiateResumeUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: initiateResumeUpload.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        InitiateResumeUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume/initiate-upload
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  CreateResumeMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createResumeMetadata.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        CreateResumeMetadata:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume # Or /resumes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListResumeVersionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listResumeVersions.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        ListResumeVersions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume/versions # Or /resumes/{resumeId}/versions
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetResumeVersionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getResumeVersion.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        GetResumeVersion:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume/versions/{versionId} # Or /resumes/{resumeId}/versions/{versionId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetResumeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getResume.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        GetResume:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume # Or /resumes/latest
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteResumeVersionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteResumeVersion.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        DeleteResumeVersion:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume/versions/{versionId} # Or /resumes/{resumeId}/versions/{versionId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  DownloadResumeVersionPresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: downloadResumeVersionPresignedUrl.handler
      CodeUri: ../src/resume/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          RESUME_VERSIONS_TABLE_NAME: !Ref ResumeVersionsTable
      Events:
        DownloadResumeVersionPresignedUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/resume/versions/{versionId}/download # Or /resumes/{resumeId}/versions/{versionId}/url
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Sharing Module Lambdas ---
  CreateShareLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createShareLink.handler
      CodeUri: ../src/sharing/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          SHARE_LINKS_TABLE_NAME: !Ref ShareLinksTable
      Events:
        CreateShareLink:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/shares
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
              
  ListShareLinksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listShareLinks.handler
      CodeUri: ../src/sharing/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          SHARE_LINKS_TABLE_NAME: !Ref ShareLinksTable
      Events:
        ListShareLinks:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/shares
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
              
  GetShareLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getShareLink.handler
      CodeUri: ../src/sharing/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          SHARE_LINKS_TABLE_NAME: !Ref ShareLinksTable
      Events:
        GetShareLink:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/shares/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
              
  DeleteShareLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteShareLink.handler
      CodeUri: ../src/sharing/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          SHARE_LINKS_TABLE_NAME: !Ref ShareLinksTable
      Events:
        DeleteShareLink:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/shares/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  AccessSharedItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: accessSharedItem.handler
      CodeUri: ../src/sharing/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          SHARE_LINKS_TABLE_NAME: !Ref ShareLinksTable
          FILES_TABLE_NAME: !Ref FilesTable
          NOTES_TABLE_NAME: !Ref NotesTable
      Events:
        AccessSharedItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/shares/access/{shareId}
            Method: get
            Auth:
              Authorizer: NONE  # Public access endpoint for shared items

  # --- Collaboration Module Lambdas ---
  InviteCollaboratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/inviteCollaborator.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
          USERS_TABLE_NAME: !Ref UsersTable # To check if invited user exists
      Events:
        InviteCollaborator:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations/invite
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  AcceptCollaborationInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/acceptCollaborationInvite.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
      Events:
        AcceptCollaborationInvite:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations/accept/{inviteId}
            Method: post # Or PUT
            Auth:
              Authorizer: CognitoAuthorizer

  ListCollaborationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/listCollaborations.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
      Events:
        ListCollaborations:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations # Query params for resourceId or userId
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetCollaborationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/getCollaboration.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
      Events:
        GetCollaboration:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateCollaborationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/updateCollaboration.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
      Events:
        UpdateCollaboration:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  RemoveCollaboratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/collaboration/removeCollaborator.handler
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COLLABORATIONS_TABLE_NAME: !Ref CollaborationsTable
      Events:
        RemoveCollaborator:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/collaborations/{id}/collaborators/{userId} # Or similar path structure
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Comments Module Lambdas ---
  CreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createComment.handler
      CodeUri: ../src/comments/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable
      Events:
        CreateComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/comments
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ListCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listComments.handler
      CodeUri: ../src/comments/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable
      Events:
        ListComments:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/comments
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateComment.handler
      CodeUri: ../src/comments/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable
      Events:
        UpdateComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/comments/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteComment.handler
      CodeUri: ../src/comments/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          COMMENTS_TABLE_NAME: !Ref CommentsTable
      Events:
        DeleteComment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/comments/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Notifications Module Lambdas ---
  ListNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listNotifications.handler
      CodeUri: ../src/notifications/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
      Events:
        ListNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notifications
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  MarkNotificationAsReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: markNotificationAsRead.handler
      CodeUri: ../src/notifications/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
      Events:
        MarkNotificationAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notifications/{id}/read
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteNotification.handler
      CodeUri: ../src/notifications/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
      Events:
        DeleteNotification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/notifications/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Tags Module Lambdas ---
  ListTagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listTags.handler
      CodeUri: ../src/tags/
      Role: !GetAtt LambdaDefaultExecutionRole.Arn
      Environment:
        Variables:
          NOTES_TABLE_NAME: !Ref NotesTable
          BOOKMARKS_TABLE_NAME: !Ref BookmarksTable
          PHOTOS_TABLE_NAME: !Ref PhotosTable
          NOTES_BY_USER_ID_GSI_NAME: "UserIdGSI"
          BOOKMARKS_BY_USER_ID_GSI_NAME: "UserIdGSI"
          PHOTOS_BY_USER_ID_GSI_NAME: "UserIdGSI"
      Events:
        ListTags:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayAuthorizer
            Path: /api/v1/tags
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  CognitoUserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayAuthorizer}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

